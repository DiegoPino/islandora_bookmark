<?php

/**
 * @file
 * Module used to track and manage user defined lists of pids.
 * 
 */
define('THEME_DETAILED_FORM_TABLE', 'islandora_bookmark_form_detailed_table');
/*
 * Implementation of hook_permission().
 */
function islandora_bookmark_permission() {
  return array(
    "manage other users' pidlists" => array(
      'title' => t("Manage other users' bookmarks"),
    ),
    'administer islandora_bookmark' => array(
      'title' => t('Administer the islandora_bookmark module'),
    )
  );
  
}

function islandora_bookmark_theme() {
  return array(
    THEME_DETAILED_FORM_TABLE => array(
      'render element' => 'element',
    )
  );
}

/*
 * Implementation of hook_user_login().
 * 
 * Checks to see if the user was anonymous and created Bookmark objects before
 * they logged in. Iterates through the session and adds these records to the
 * database.
 */
function islandora_bookmark_user_login(&$edit, &$account) {
  global $user;
   
  if (!empty($_SESSION['islandora_bookmark'])) {
     foreach ($_SESSION['islandora_bookmark'] as $key => $value) {
      $bookmark_session = unserialize($value);
      $anon_index = array_search(0, $bookmark_session->user_list, TRUE);
      // Replace the anon who's logged in with their associated user uid
      $bookmark_session->user_id = $user->uid;
      $bookmark_session->user_list[$anon_index] = $user->uid;
      $bookmark_session->bookmark_session = FALSE;
      $bookmark_session->create_list();
      unset($_SESSION['islandora_bookmark'][$key]);
     }
  }
}

/*
 * Implementation of hook_menu().
 */
function islandora_bookmark_menu() {
   module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  $items['islandora_bookmark'] = array(
  'title' => 'My Bookmarks',
  'description' => "Track and manage list of pids",
  'type' => MENU_NORMAL_ITEM,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_overview_form'),
  'access arguments' => array('access content'),   
 );


$items['islandora_bookmark/lists'] = array(
  'title' => 'Overview of Lists',
  'type' => MENU_DEFAULT_LOCAL_TASK,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_overview_form'),
  'access arguments' => array('access content'),
);
$items['islandora_bookmark/listid/%'] = array(
  'title' => 'Detailed List',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_detailed_form', 2),
  'access callback' => 'islandora_bookmark_access',
  'access arguments' => array(2),
  
  
);
$items['islandora_bookmark/add'] = array(
  'title' => 'Add',
  'type' => MENU_LOCAL_TASK,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_add_form'),
  'access arguments' => array('access content'),
);

  $items['admin/config/islandora_bookmark'] = array(
      'title' => 'Islandora Pid List',
      'description' => 'Settings for the Islandora Pid List module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_pid_list_settings'),
      'access arguments' => array(t('Adminisiter islandora_pid_list module')),
  );

  return $items;
}

function islandora_bookmark_detailed_form($form, &$form_state, $list_id) {
  global $user;
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  drupal_add_css(drupal_get_path('module', 'islandora_pid_list') . '/css/islandora_pid_list.css');
  
  $bookmark = get_bookmark_by_number($list_id);
  
  $form = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="islandora_bookmark_detailed_overview">',
    '#suffix' => '</div>',
  );

  $form['bookmarks'] = array(
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t($bookmark->bookmark_name),
     ),
  );
  
  
  if (count($bookmark->pid_list) > 0) {
    // Load ze tables
    if ($bookmark->bookmark_owner === $user->uid) {
      $form['bookmarks']['fieldset']['table'] = islandora_bookmark_form_detailed_table_owner($bookmark);
    }
    else {
         $form['bookmarks']['fieldset']['table'] = islandora_bookmark_form_detailed_table_shared($bookmark);
         // Remove yourself button
         $form['bookmarks']['remove_self'] = array(
           '#type' => 'submit',
           '#value' => t('Remove yourself from this list.'),
           '#submit' => array('islandora_bookmark_remove_self'),
         );

    }

    $form_state['bookmark_id'] = $list_id;
   }
   else {
      $form['bookmarks']['fieldset']['empty'] = array(
        '#type' => 'item',
        '#markup' => t('No pids currently associated.'),
      );
   }
   
   if ($bookmark->bookmark_owner === $user->uid) {
     // Load 'management' fieldset
     $form['bookmarks']['management'] = array(
       '#type' => 'fieldset',
       '#title' => t('Management Functions'),
     );
     $form['bookmarks']['management']['listname'] = array(
        '#type' => 'textfield',
        '#title' => t('List Name'),
        '#size' => 20,
        '#value' => $bookmark->bookmark_name,
        '#prefix' => '<div class="listdetails">',
        '#ajax' => array(
          'event' => '',
          'keypress' => TRUE,
          'callback' => 'islandora_bookmark_update_name',
          'wrapper' => 'islandora_bookmark_detailed_overview',
          'method' => 'replace',          
        ),
      );

      $form['bookmarks']['management']['changename'] = array(
        '#type' => 'image_button',
        '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/add.png', 
        '#suffix' => '</div>',
        '#ajax' => array(
            'event' => 'click',
            'callback' => 'islandora_bookmark_update_name',
            'wrapper' => 'islandora_bookmark_detailed_overview',
            'method' => 'replace',
            ),
      );  

      $form['bookmarks']['management']['labelremove'] = array(
        '#type' => 'item',
        '#title' => t('Delete this list'),
        '#weight' => 20000,
        '#prefix' => '<div class="removelist">',
      );

      $form['bookmarks']['management']['remove'] = array(
        '#type' => 'image_button',
        '#weight' => 20001,
        '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/purge.gif', 
        '#suffix' => '</div>',
        '#ajax' => array(
            'event' => 'click',
            'callback' => 'islandora_bookmark_remove_list',
            'wrapper' => 'islandora_bookmark_detailed_overview',
            'method' => 'replace',
        ),
      );


      $form['bookmarks']['management']['list-id'] = array(
          '#type' => 'value',
          '#value' => $bookmark->bookmark_id,
      );  
      $form['bookmarks']['management']['plo'] = array(
        '#type' => 'value',
        '#value' => $bookmark,
      );

      $form['bookmarks']['management']['users'] = array( 
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => t('Users shared'),
      );

      $fku =& $form['bookmarks']['management']['users'];


      if (count($bookmark->user_list) == 0) {
          $fku['empty'] = array(
            '#type' => 'item',
            '#markup' => t('There are no users associated with this list'),
          );
      }
      else {
        $user_count = 0;
        foreach ($bookmark->user_list as $itr => $piduser) {
          $tempuser = user_load($piduser);
            if ($tempuser->uid == 0) {
              $user_output = t('Anonymous');
            }
            else {
              $user_output = $tempuser->name;
            }
            if ($tempuser->uid != $user->uid) {
              $user_count++;
              $fku[$itr] = array(
                '#prefix' => '<div class="users">',
                '#suffix' => '</div>',
                'label' => array(
                  '#type' => 'item',
                  '#markup' => $user_output,
                ),
                'user' => array(
                  '#type' => 'value',
                  '#value' => $piduser,
                ),
                'list-id' => array(
                  '#type' => 'value',
                  '#value' => $bookmark->bookmark_id,
                ),
                'remove' => array(
                  '#type' => 'image_button',
                  '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/minus_small.png',
                  '#ajax' => array(
                    'event' => 'click',
                    'callback' => 'islandora_bookmark_remove_user',
                    'wrapper' => 'islandora_bookmark_detailed_overview',
                    'method' => 'replace',
                  ),
                ),
                'plo' => array(
                  '#type' => 'value',
                  '#value' => $bookmark,
                )
              );
            }
          }
          
          if ($user_count == 0) {
            $fku['empty'] = array(
            '#type' => 'item',
            '#markup' => t('There are no users associated with this list'),
          );
          }
        }

        $selectoptions = array("" => "- Select A User To Add - ");
        // Get all users for use in select for forms
        $result = db_query("SELECT uid, name FROM {users} ORDER BY uid");

        foreach ($result as $record) {
          $resultname = $record->name;
            if ($record->uid == 0) {
              $resultname = 'Anonymous';
            }
          $options[$record->uid] = array(
            'uid' => $record->uid,
            'name' => $resultname
          );
        }
        foreach ($options as $index => $item) {
          if (!in_array($index, $bookmark->user_list)) {
            $selectoptions[$index] = $item['uid'] . ': ' . $item['name'];
          }  
        }
        $fku['listusers'] = array(
          '#type' => 'select',
          '#default value' => t('Select a user to add'),
          '#title' => t('Add a user to the list'),
          '#options' => $selectoptions,
          '#width' => 20,
          '#weight' => 10000,
          '#prefix' => '<div class="addusertolist">',
        );
         $fku['listadd'] = array(
          '#type' => 'image_button',
          '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/add.png', 
          '#suffix' => '</div>',
          '#weight' => 10001, 
          '#ajax' => array(
            'event' => 'click',
            'callback' => 'islandora_bookmark_add_user',
            'wrapper' => 'islandora_bookmark_detailed_overview',
            'method' => 'replace',
          ),
        ); 
        $fkp =& $form['bookmarks']['management'];  
        $fkp['pidtext'] = array(
          '#type' => 'textfield',
          '#title' => t('Add a PID'),
          '#size' => 20,
          '#prefix' => '<div class="addpid">',
          '#suffix' => '</div>',
          '#weight' => 10000,
          '#ajax' => array(
            'event' => '',
            'keypress' => TRUE,
            'callback' => 'islandora_bookmark_add_pid',
            'wrapper' => "islandora_bookmark_detailed_overview",
            'method' => 'replace',          
          ),
        );

        $fkp['add_button'] = array(
          '#type' => 'image_button',
          '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/add.png', 
          '#weight' => 10001,  
          '#ajax' => array(
            'event' => 'click',
            'callback' => 'islandora_bookmark_add_pid',
            'wrapper' => "islandora_bookmark_detailed_overview",
            'method' => 'replace',
          ),
        );
    }
  return $form;
}
/**
 * Submit handler to remove a user's self from a shared list.
 * 
 * @global type $user
 * 
 * @param array $form
 * 
 * @param array $form_state
 */
function islandora_bookmark_remove_self($form, &$form_state) {
  global $user;
  
  $bookmark_object = get_bookmark_by_number($form_state['bookmark_id']);
  
  if (islandora_bookmark_concurrency_check($bookmark_object, $bookmark_object->bookmark_name)) {
    drupal_set_message(t('You have removed yourself from the list %listname',
      array(
        '%listname' => $bookmark_object->bookmark_name,
      )
    ));
   
    $bookmark_object->remove_users(array($user->uid));  
  }
  drupal_goto('islandora_bookmark');
}

/**
 * Used to determine whether a current user can access the menu path.
 * 
 * @global type $user
 * 
 * @param int $list_id
 * 
 * @return boolean
 */
function islandora_bookmark_access($list_id) {
  global $user;
  
  preg_match('/session_/', $list_id, $match);
  
  if ($match) {
    $bookmark_access = TRUE;
  }
  else {
    $bookmark_access = FALSE;
    $owner_query = db_query('SELECT listowner FROM {islandora_bookmark_list_names} WHERE listid = :listid ORDER BY listid', array(':listid' => $list_id))->fetchObject();

    if ($owner_query && $owner_query->listowner === $user->uid) {
      $bookmark_access = TRUE;
    }
    else {
      $user_query = db_query('SELECT uid FROM {islandora_bookmark_list_users} WHERE listid = :listid', array(':listid' => $list_id));
      foreach ($user_query as $record) {
        if ($record->uid === $user->uid) {
          $bookmark_access = TRUE;
          break;
        }
      }
    }
  }
  
  return $bookmark_access;
  
}
/**
 * Form constructor for the Bookmark overview form.
 * 
 * @global type $user
 * 
 * @param array $form_state
 *   The Drupal form state.
 * 
 */
function islandora_bookmark_overview_form($form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'islandora_pid_list') . '/css/islandora_pid_list.css');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'fedora_repository', 'api/tuque');
  global $user;
   
  // Get all users for use in select for forms
  $result = db_query("SELECT uid, name FROM {users} ORDER BY uid");
  
  foreach ($result as $record) {
    $resultname = $record->name;
      if ($record->uid == 0) {
        $resultname = 'Anonymous';
      }
    $options[$record->uid] = array(
      'uid' => $record->uid,
      'name' => $resultname
    );
  }
  
  $form = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="allpidlists">',
    '#suffix' => '</div>',
  );
  
  $owned_bookmarks = get_user_owned_bookmarks();
  $form['owned_bookmarks'] = array(
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t('My Bookmarks'),
    )
  );
  
  if (count($owned_bookmarks) > 0) {
    $form['owned_bookmarks']['fieldset']['table'] = islandora_bookmark_form_overview_table($owned_bookmarks);
  }
  else {
    $form['owned_bookmarks']['fieldset']['empty'] = array(
      '#type' => 'item',
      '#markup' => t('You do not own any bookmarks.'),
    );
  }
   
  $shared_bookmarks = get_user_shared_bookmarks();
  
  $form['shared_bookmarks'] = array(
    'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => t('Bookmarks Shared With Me'),
     )
  );
  
  if (count($shared_bookmarks) > 0) {
    $form['shared_bookmarks']['fieldset']['table'] =  islandora_bookmark_form_overview_table($shared_bookmarks);
  }
  else {
    $form['shared_bookmarks']['fieldset']['empty'] = array(
      '#type' => 'item',
      '#markup' => t('No bookmarks currently shared with you.'),
    );
  }
  
 return $form;
}

/**
 * Form constructor for the add Bookmark form.
 * 
 * @global type $user
 * @param type $form_state
 * @see islandora_bookmark_add_form_submit
 */
function islandora_bookmark_add_form($form_state) {
  global $user;
      
  $form = array(
    '#title' => t('Add'),
    '#tree' => TRUE,
    'listname' => array(
      '#type' => 'textfield',
      '#title' => t('List Name'),
      '#size' => 20, 
    ),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'islandora_bookmark_add_form_submit',
    '#value' => t('Submit'),
  );
  $form['clear'] = array(
    '#type' => 'submit',
    '#name' => 'islandora_bookmark_add_form_clear_button',
    '#value' => t('Clear'),
  );
  
  return $form; 
}

/**
 * Form submission handler for the islandora_bookmark_add_form().
 * 
 * @global type $user
 * @param array $form
 * @param array $form_state 
 * @see islandora_bookmark_add_form()
 */
function islandora_bookmark_add_form_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
    
  global $user;
  
  $createname = $form_state['values']['listname'];
 
  // Create a new list
  if (!ctype_space($createname) && $createname != '') {
    $paramusers = array();
    $parampids = array();

    $params = array(
      'retrieve' => FALSE,
      'user_id' => $user->uid,
      'bookmark_owner' => $user->uid,
      'bookmark_name' => $createname,
      'bookmark_users' => array($user->uid),
    );

    if ($user->uid == 0) {
      $params['bookmark_session'] = TRUE;
    }

    $templist = new Bookmark($params);
   
    if ($user->uid == 0) {
      $savedlist = 'Note that lists created when not logged will not be saved.';
    }
    drupal_set_message(t('The new list %listname was created. %saved',  
        array(
          '%listname' => $createname,
          '%saved' => $savedlist,
          )
        ));
    drupal_goto('islandora_bookmark');
  }
  else {
    drupal_set_message(t('A new list must at least have a name!'), 'error');
  }
}

/**
 * Callback for adding a pid to a list.
 * 
 */
function islandora_bookmark_add_pid($form, $form_state) {
  
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  
  $param = $form_state['clicked_button']['#parents'][0];
  $listindex = $form_state['clicked_button']['#parents'][1];
  $useroffset = $form_state['clicked_button']['#parents'][3];
  $obj = $form[$param][$listindex]['plo']['#value'];
  $listname = $obj->bookmark_name;
  
  
  // Needed to account for concurrent users making changes on lists.
  $obj = get_bookmark_by_number($obj->bookmark_id);
  
  if (islandora_bookmark_concurrency_check($obj, $listname)) {
    $pidindex = 0;
    if (strlen($_POST[$param][$listindex]['pids']['pidtext']) != 0) {
      foreach ($form[$param][$listindex]['pids'] as $item => $assoc) {
        if (is_numeric($item)) {
          $pidindex++;
        }
      }
      $newpid = $_POST[$param][$listindex]['pids']['pidtext'];

      if (!empty($newpid) && !in_array($newpid, $obj->pid_list)) {
        try {
          $obj->add_pids(array($newpid));
          drupal_set_message(t('The pid %newpid has been added to %listname',
          array(
            '%listname' => $obj->bookmark_name,
            '%newpid' => $newpid,
          )
      ));  
        } 
        catch (Exception $e) {
          drupal_set_message($e->getMessage(), 'error');
        }
      }
      else {
      drupal_set_message(t("The pid %pid already exists in %listname",
              array(
                '%pid' => $newpid,
                '%listname' => $obj->bookmark_name,
                )
          ), 'error');    
      }
    }
    else {
      $obj = $form[$param][$listindex]['plo']['#value'];
      drupal_set_message(t("Please enter a pid to add to %listname",
                array(
                  '%listname' => $obj->bookmark_name,
                  )
            ), 'error');  
    }
  }
  
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Callback for removing a user from a list.
 * 
 */
function islandora_bookmark_remove_user($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  global $user;
    
  $param = $form_state['clicked_button']['#parents'][0];
  $listindex = $form_state['clicked_button']['#parents'][1];
  $useroffset = $form_state['clicked_button']['#parents'][3];
  $obj = $form[$param][$listindex]['plo']['#value'];
  $listname = $obj->bookmark_name;
  
  // Needed to account for concurrent users making changes on lists.
  $obj = get_bookmark_by_number($obj->bookmark_id);
  
  if (islandora_bookmark_concurrency_check($obj, $listname)) {
    $removeuser = $form[$param][$listindex]['users'][$useroffset]['user']['#value'];
   
    if ($removeuser == 0) {
      $outputuser = t('Anonymous');
    }
    else {
    $outputuser = user_load($removeuser)->name;  
    }
    
    if ($removeuser == $user->uid) {
     $yourself = TRUE;  
    }
    
    if (!$yourself) {
      drupal_set_message(t('The user %username has been removed from the list %listname',
        array(
          '%listname' => $obj->bookmark_name,
          '%username' => $outputuser,
        )
      ));
    }
    else {
      if ($obj->bookmark_owner == $yourself) {
        drupal_set_message(t('The list %listname has been deleted',
          array(
            '%listname' => $obj->bookmark_name,
          )
        ));
      }
      else {
        drupal_set_message(t('You have removed yourself from the list %listname',
          array(
            '%listname' => $obj->bookmark_name,
          )
        ));
      }
    }
  $obj->remove_users(array($removeuser));  
  $form_state['storage']['listid'] = $obj->bookmark_id;
  }
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Callback for adding a user to a list
 * 
 */
function islandora_bookmark_add_user($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
    
  $param = $form_state['clicked_button']['#parents'][0];
  $listindex = $form_state['clicked_button']['#parents'][1];
  $obj = $form[$param][$listindex]['plo']['#value'];
  $listname = $obj->bookmark_name;
  $adduser = $_POST['bookmarks']['management']['users']['listusers'];
  
// Needed to account for concurrent users making changes on lists.
  $obj = get_bookmark_by_number($obj->bookmark_id);
 
  if (islandora_bookmark_concurrency_check($obj, $listname)) {
    if (strlen($adduser)) {
      if ($adduser == 0) {
        $outputuser = t('Anonymous');
      }
      else {
        $outputuser = user_load($adduser)->name;  
      } 
      drupal_set_message(t('The user %adduser has been added to %listname',
        array(
          '%listname' => $obj->bookmark_name,
          '%adduser' => $outputuser,
        )
      )); 
      $obj->add_users(array($adduser));
    }
    else {
      drupal_set_message(t("Please select a user to add to %listname",
        array(
          '%listname' => $obj->bookmark_name,
          )
      ), 'error');  
    }
  }
  
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Callback for removing a list.
 * 
 */
function islandora_bookmark_remove_list($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  
  $param = $form_state['clicked_button']['#parents'][0];
  $listindex = $form_state['clicked_button']['#parents'][1];
    
  $obj = $form[$param][$listindex]['plo']['#value'];
  
  $listname = $obj->bookmark_name;
    
  // Needed to account for concurrent users making changes on lists.
  $obj = get_bookmark_by_number($obj->bookmark_id);
  
  if (islandora_bookmark_concurrency_check($obj, $listname)) {
    drupal_set_message(t('The list %listname has been deleted',
            array(
              '%listname' => $obj->bookmark_name,
            )
    ));    
    $obj->remove_list();
  }  
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Callback for updating the name of a list.
 * 
 */
function islandora_bookmark_update_name($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  
  $param = $form_state['clicked_button']['#parents'][0];
  $listindex = $form_state['clicked_button']['#parents'][1];
  $obj = $form[$param][$listindex]['plo']['#value'];  
  $listname = $obj->bookmark_name;
  $newlistname = $_POST['bookmarks']['management']['listname'];
  // Needed to account for concurrent users making changes on lists.
  $obj = get_bookmark_by_number($obj->bookmark_id);
 
  if (islandora_bookmark_concurrency_check($obj, $listname)) {
    if ($obj->bookmark_name != $newlistname) {
      if (ctype_space($newlistname) || $newlistname == '') {
        drupal_set_message(t('The list %listname must have a name!',
            array(
            '%listname' => $obj->bookmark_name,  
            )
        ), 'error');
      }
      else {
        drupal_set_message(t('The list %beforelist has had its name changed to %afterlist',
            array(
              '%beforelist' => $obj->bookmark_name,
              '%afterlist' => $newlistname,
            )
        ));    
        $obj->change_list_name($newlistname);    
      }
    }
  }
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Checks to see if a user modified the specified list concurrently.
 * If the current user was removed from the list or the list itself was removed
 * this function will return false and display errors.
 * 
 * @global integer $user
 *
 * @param PidList $obj
 *   The PidList object that is being checked.
 * 
 * @param string $listname
 *   Name of the list, used for output to the user.
 * 
 * @return boolean 
 */
function islandora_bookmark_concurrency_check(Bookmark $obj, $listname) {
  global $user;
 
  if (!$obj->bookmark_session) {
    if (is_null($obj->bookmark_name)) {
      drupal_set_message(t("The list %listname no longer exists.",
          array(
            '%listname' => $listname,
            )
        ), 'error'); 
      return FALSE;
    }
    elseif (!in_array($user->uid, $obj->user_list)) {
      drupal_set_message(t("You no longer have access to the list %listname",
          array(
            '%listname' => $obj->bookmark_name,
            )
        ), 'error');
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
  else {
    return TRUE;
  }
}

function islandora_bookmark_form_overview_table(array $bookmark_objs) {
  $bookmark_ids = array();
  foreach ($bookmark_objs as $bookmark) {
    $bookmark_ids[] = $bookmark->bookmark_id; 
  }
  
  /*$table = array(
    '#header' => array(theme('table_select_header_cell'), t('Title'), t('Owner'), ''),
    '#theme' => 'theme_islandora_bookmark_form_table',
    '#tree' => TRUE,
    'rows' => array(),
    'selections' => array(
      '#type' => 'checkboxes',
      '#options' => array_fill_keys($bookmark_ids, ''),
    ),
  );
  $row_count = 0;
  $rows = &$table['rows'];
  foreach ($bookmark_objs as $bookmark) {
    $owner = user_load($bookmark->bookmark_owner);
    if ($bookmark->bookmark_owner == 0) {
      $owner_output = t('Anonymous');
    }
    else {
     $owner_output = $owner->name;
    }
    
    $rows[] = array(
      '#listid' => $bookmark->bookmark_id,
      'title' => array('#markup' => l(check_plain($bookmark->bookmark_name), "islandora_bookmark/list/$bookmark->bookmark_id")),
      'owner' => array('#markup' => check_plain($owner_output)),
      'remove' => array(
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#name' => 'remove-citation' . $row_count, // Give a unique name to each button
        '#listid' => $bookmark->bookmark_id,
        '#submit' => array('islandora_bibliography_form_remove_citation_submit')
      )
    );
    $row_count++;
  }*/
  $header = array(
    'bookmark_name' => t('Name'),
    'bookmark_owner' => t('Owner'),
  );
  $options = array();
  foreach ($bookmark_objs as $bookmark) {
    $owner = user_load($bookmark->bookmark_owner);
    if ($bookmark->bookmark_owner == 0) {
      $owner_output = t('Anonymous');
    }
    else {
     $owner_output = $owner->name;
    }
    
    $options[$bookmark->bookmark_id] = array(
      'bookmark_name' => l(check_plain($bookmark->bookmark_name), "islandora_bookmark/listid/$bookmark->bookmark_id"),
      'bookmark_owner' => $owner_output,
    ); 
  }
  
  $table = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
  );
  return $table;
}

function islandora_bookmark_form_detailed_table_owner(Bookmark $bookmark) {
  module_load_include('inc', 'fedora_repository', 'api/tuque');

  foreach ($bookmark->pid_list as $pid) {
    $pids[] = $pid;
  }
  
  $table = array(
    '#header' => array(theme('table_select_header_cell'), t('PID'), ''),
    '#theme' => THEME_DETAILED_FORM_TABLE,
    '#tree' => TRUE,
    'rows' => array(),
    'selections' => array(
      '#type' => 'checkboxes',
      '#options' => array_fill_keys($pids, ''),
    ),
  );
  $row_count = 0;
  $rows = &$table['rows'];
  foreach ($pids as $pid) {
    $fedora_object = islandora_object_load($pid);
    $pid_output = $pid;
    if ($fedora_object) {
      $pid_output = l(check_plain($fedora_object->label), 'islandora/object/' . $pid, array(
        'attributes' => array(
          'target' => '_blank'
          )));
    }
    $rows[] = array(
      '#pid' => $pid,
      'title' => array('#markup' => $pid_output),
      'remove' => array(
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#name' => 'remove-object' . $row_count, // Give a unique name to each button
        '#pid' => $pid,
        '#ajax' => array(
            'event' => 'click',
            'callback' => 'islandora_bookmark_detailed_remove_pid',
            'wrapper' => 'islandora_bookmark_detailed_overview',
            'method' => 'replace',
        ),
      ),
    );
    $row_count++;
  }
  return $table;
}

function islandora_bookmark_form_detailed_table_shared(Bookmark $bookmark) {
  module_load_include('inc', 'fedora_repository', 'api/tuque');

  foreach ($bookmark->pid_list as $pid) {
    $pids[] = $pid;
  }
  
  $table = array(
    '#header' => array(theme('table_select_header_cell'), t('PID')),
    '#theme' => THEME_DETAILED_FORM_TABLE,
    '#tree' => TRUE,
    'rows' => array(),
    'selections' => array(
      '#type' => 'checkboxes',
      '#options' => array_fill_keys($pids, ''),
    ),
  );
  $row_count = 0;
  $rows = &$table['rows'];
  foreach ($pids as $pid) {
    $fedora_object = islandora_object_load($pid);
    $pid_output = $pid;
    if ($fedora_object) {
      $pid_output = l(check_plain($fedora_object->label), 'islandora/object/' . $pid, array(
        'attributes' => array(
          'target' => '_blank'
          )));
    }
    $rows[] = array(
      '#pid' => $pid,
      'title' => array('#markup' => $pid_output),
    );
    $row_count++;
  }
  return $table;
}

function islandora_bookmark_detailed_remove_pid($form, &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');

  $pid_remove = $form_state['clicked_button']['#pid'];
  // Needed to account for concurrent users making changes on lists.
  $bookmark_object = get_bookmark_by_number($form_state['bookmark_id']);
 
  if (islandora_bookmark_concurrency_check($bookmark_object, $listname)) {
    drupal_set_message(t('The pid %pidname has been removed from %listname',
      array(
        '%listname' => $bookmark_object->bookmark_name,
        '%pidname' => $pid_remove,
      )
    )); 
    $bookmark_object->remove_pids(array($pid_remove));
  }
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

function theme_islandora_bookmark_form_detailed_table(array $args) {
  $element = $args['element'];
    
  $rows = array();
  foreach (element_children($element['rows']) as $child) {
    $setting = $element['rows'][$child];
    $pid = $setting['#pid'];
    $fields = array(
      drupal_render($element['selections'][$pid]) // First field is a checkbox
    );
    foreach (element_children($setting) as $property) {
      $field = $setting[$property];
      $fields[] = drupal_render($field);
    }
    $rows[] = array(
      'data' => $fields,
      'class' => isset($setting['#attributes']['class']) ? $setting['#attributes']['class'] : NULL
    );
  }
  $attributes = isset($element['#id']) ? array('id' => $element['#id']) : NULL;
  return theme('table',
    array(
      'header' => $element['#header'],
      'rows' => $rows,
      'attributes' => $attributes,
    ));
}
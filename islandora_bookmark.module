<?php

/**
 * @file
 * Module used to track and manage user defined lists of pids.
 */

/*
 * Implements hook_menu().
 */
function islandora_bookmark_menu() {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  $items['islandora-bookmark'] = array(
    'title' => 'My bookmarks',
    'description' => 'Track and manage bookmarks',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_overview_form'),
    'access arguments' => array('access content'),
  );
  $items['islandora-bookmark/lists'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_overview_form'),
    'access arguments' => array('access content'),
    'weight' => 0,
  );
  $items['islandora-bookmark/listid/%'] = array(
    'title' => 'Detailed list',
    'page callback' => 'islandora_bookmark_detailed_forms',
    'page arguments' => array(2),
    'access callback' => 'islandora_bookmark_access',
    'access arguments' => array(2),
  );
  $items['islandora-bookmark/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_add_form'),
    'access arguments' => array('use islandora_bookmark'),
    'weight' => 1,
  );
  $items['islandora-bookmark/delete-bookmark/%'] = array(
    'title' => 'Delete list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_delete_bookmark_confirm', 2),
    'access callback' => 'islandora_bookmark_delete_bookmark_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['islandora-bookmark/remove-self/%'] = array(
    'title' => 'Remove self',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_remove_self_confirm', 2),
    'access callback' => 'islandora_bookmark_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['admin/islandora/islandora-bookmark'] = array(
      'title' => 'Bookmark',
      'description' => 'Configure settings for the Bookmark module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_bookmark_admin_settings'),
      'access arguments' => array('administer islandora_bookmark'),
      'file' => 'islandora_bookmark.admin.inc',
  );

  return $items;
}


/**
 * Used to determine whether a current user can access the menu path.
 *
 * @global type $user
 * @param int $list_id
 *
 * @return boolean
 */
function islandora_bookmark_access($list_id) {
  global $user;

  preg_match('/session_/', $list_id, $match);

  if ($match) {
    $bookmark_access = TRUE;
  }
  else {
    $bookmark_access = FALSE;
    $owner_query = db_query('SELECT listowner FROM {islandora_bookmark_list_names} WHERE listid = :listid ORDER BY listid', array(':listid' => $list_id))->fetchObject();

    if ($owner_query && $owner_query->listowner === $user->uid) {
      $bookmark_access = TRUE;
    }
    else {
      $user_query = db_query('SELECT uid FROM {islandora_bookmark_list_users} WHERE listid = :listid', array(':listid' => $list_id));
      foreach ($user_query as $record) {
        if ($record->uid == $user->uid) {
          $bookmark_access = TRUE;
          break;
        }
      }
    }
  }
  return $bookmark_access;
}

/**
 * Used to determine whether a current user can access the menu path.
 *
 * @global type $user
 * @param int $list_id
 *
 * @return boolean
 */
function islandora_bookmark_delete_bookmark_access($list_id) {
  global $user;

  preg_match('/session_/', $list_id, $match);

  if ($match) {
    $bookmark_access = TRUE;
  }
  else {
    $bookmark_access = FALSE;
    $owner_query = db_query('SELECT listowner FROM {islandora_bookmark_list_names} WHERE listid = :listid ORDER BY listid', array(':listid' => $list_id))->fetchObject();

    if ($owner_query && $owner_query->listowner === $user->uid) {
      $bookmark_access = TRUE;
    }
    else {
      return FALSE;
    }
  }
  return $bookmark_access;
}

/**
 * Implements hook_block_info().
 */
function islandora_bookmark_block_info() {
  $blocks['islandora_bookmark'] = array(
    'info' => t('Islandora Bookmark'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function islandora_bookmark_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'islandora_bookmark':
      if (arg(0) == 'islandora' AND arg(1) == 'object') {
        if (arg(2)) {
          $pid = arg(2);
        }
        else {
          $pid = variable_get('islandora_repository_pid', 'islandora:root');
        }
        $block['subject'] = t('Islandora Bookmark');
        $block['content'] = islandora_bookmark_get_object_form($pid);
      }
      break;
  }
  return $block;
}

/*
 * Implements hook_permission().
 */
function islandora_bookmark_permission() {
  return array(
    'administer islandora_bookmark' => array(
      'title' => t('Administer Islandora Bookmark'),
      'description' => t('Perform administration tasks for Islandora Bookmark.'),
    ),
    'use islandora_bookmark' => array(
      'title' => t('Use Islandora Bookmark'),
      'description' => t('Create, manage and add new bookmarks to bookmark lists.'),
    ),
    'share islandora bookmarks' => array(
      'title' => t('Share bookmarks'),
      'description' => t('Share own bookmarks with other users.'),
    ),
  );
}

/**
 * Theme function for Islandora Bookmark.
 * @return array
 */
function islandora_bookmark_theme() {
  return array(
    'islandora_bookmark_object_display' => array(
     'template' => 'theme/islandora-bookmark-object-display',
     'variables' => array('object_url_info' => NULL),
    ),
  );
}

/**
 * Implements hook_user_login().
 *
 * Checks to see if the user was anonymous and created Bookmark objects before
 * they logged in. Iterates through the session and adds these records to the
 * database.
 */
function islandora_bookmark_user_login(&$edit, &$account) {
  global $user;

  if (!empty($_SESSION['islandora_bookmark'])) {
      foreach ($_SESSION['islandora_bookmark'] as $key => $value) {
      $bookmark_session = unserialize($value);
      $anon_index = array_search(0, $bookmark_session->user_list, TRUE);
      // Replace the anon who's logged in with their associated uid
      $bookmark_session->user_id = $user->uid;
      $bookmark_session->user_list[$anon_index] = $user->uid;
      $bookmark_session->bookmark_session = FALSE;
      $bookmark_session->create_list();
      unset($_SESSION['islandora_bookmark'][$key]);
    }
  }
}

/*
 * Callback function for removing a Bookmark confirm form.
 */
function islandora_bookmark_delete_bookmark($form, &$form_state) {
  drupal_goto('islandora-bookmark/delete-bookmark/' . $form_state['bookmark_object']->bookmark_id);
}

/**
 * Confirm form function for deleting a Bookmark.
 *
 * @param type $form
 * @param array $form_state
 * @param type $list_id
 * @return type
 */
function islandora_bookmark_delete_bookmark_confirm($form, &$form_state, $list_id) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');

  $bookmark_object = islandora_bookmark_get_bookmark_by_number($list_id);
  $form_state['bookmark_object'] = $bookmark_object;
  return confirm_form($form, t('Are you sure you want to delete the bookmark list %bookmark_name?', array('%bookmark_name' => $bookmark_object->bookmark_name)), 'islandora-bookmark/listid/' . $list_id, t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Submit handler for deleting a Bookmark.
 *
 * @param type $form
 * @param type $form_state
 */
function islandora_bookmark_delete_bookmark_confirm_submit($form, &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');

  $bookmark_object = $form_state['bookmark_object'];

  drupal_set_message(t('The list %listname has been deleted.',
    array(
      '%listname' => $bookmark_object->bookmark_name,
    )
  ));
  $bookmark_object->remove_list();
  drupal_goto('islandora-bookmark');
}

/*
 * Callback function for removing self confirm form.
 */
function islandora_bookmark_remove_self($form, &$form_state) {
  drupal_goto('islandora-bookmark/remove-self/' . $form_state['bookmark_object']->bookmark_id);
}

/**
 * Confirm form function for removing the current user from a shared Bookmark.
 *
 * @param type $form
 * @param array $form_state
 * @param type $list_id
 * @return type
 */
function islandora_bookmark_remove_self_confirm($form, &$form_state, $list_id) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');

  $bookmark_object = islandora_bookmark_get_bookmark_by_number($list_id);
  $form_state['bookmark_object'] = $bookmark_object;
  return confirm_form($form, t('Are you sure you want to remove yourself from the bookmark %bookmark_name ?', array('%bookmark_name' => $bookmark_object->bookmark_name)), 'islandora-bookmark/listid/' . $list_id, t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * Submit handler for removing self from a Bookmark.
 *
 * @global type $user
 * @param type $form
 * @param type $form_state
 */
function islandora_bookmark_remove_self_confirm_submit($form, &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  global $user;

  $bookmark_object = $form_state['bookmark_object'];

  drupal_set_message(t('You have removed yourself from the list %listname',
      array(
        '%listname' => $bookmark_object->bookmark_name,
      )
    ));

  $bookmark_object->remove_users(array($user->uid));
  drupal_goto('islandora-bookmark');
}

/**
 * Callback function for updating list settings
 */
function islandora_bookmark_update_bookmark($form, &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');

  $bookmark_object = $form_state['bookmark_object'];
  $newlist_name = $form_state['input']['bookmarks']['management']['listname'];

  $bookmark_object->change_list_name(trim($newlist_name));
  drupal_set_message(t('Bookmark list settings updated.'));
}

/**
 * Function that invokes the islandora_bookmark_object_markup hook and
 * grabs default markup if no modules invoke the hook.
 *
 * @param string $pid
 *   The PID of the object to create markup for.
 *
 * @return string
 *   The markup for the Fedora object in the table.
 */
function islandora_bookmark_generate_markup($pid, $object_url_info = NULL) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $fedora_object = islandora_object_load($pid);

  if ($fedora_object) {
    // Set URL info if non provided.
    if (is_null($object_url_info)) {
      $object_url_info = array(
        'path' => "islandora/$pid",
        'params' => array(),
        'markup' => $fedora_object->label? $fedora_object->label: $fedora_object->pid,
      );
    }
    // Accumulate the output.
    $output = array();

    // Call CModel oriented variants first.
    foreach (islandora_build_hook_list('islandora_bookmark_object_markup', $fedora_object->models) as $hook) {
      $temp = module_invoke_all($hook, $fedora_object, $object_url_info);
      if (!empty($temp)) {
        $output = array_merge_recursive($output, $temp);
      }
    }

    // Add in the default, if we did not get any results.
    if (empty($output)) {
      $output = islandora_bookmark_object_display($object_url_info);
    }

    arsort($output);
    $output = implode('', $output);
  }
  else {
    // Handle when we can't access a Fedora object.
    watchdog('islandora_bookmark', "Tried to render markup for $pid, but was unable to load it.");
    $output = '<div class="islandora-bookmark-error-message">' . t('Unable to load object @pid.',
          array('@pid' => $pid)) . '</div>';
  }

  return $output;
}

/**
 * Themes a Fedora object.
 *
 * @param array $object_url_info
 *   Contains information to build an anchor tag ie.
 *     array(
 *       'path' => "islandora/$pid",
 *       'params' => array(),
 *       'markup' => 'a label',
 *     );
 *
 * @return array
 *   an associative array containing the output from theme
 *   islandora-bookmark_object_display
 */
function islandora_bookmark_object_display($object_url_info) {
  $output = theme('islandora_bookmark_object_display', array('object_url_info' => $object_url_info));

  return array('Default output' => $output);
}

/**
 * Callback function for the detailed list view.
 * Returns forms for display and management.
 *
 * @param string $list_id
 *   Id of the bookmark list to be rendered.
 * @return string
 *   Rendered forms to display and manage the bookmark list.
 */
function islandora_bookmark_detailed_forms($list_id) {
  $output = '';
  $detailed_form = drupal_get_form('islandora_bookmark_detailed_form', $list_id);
  $output .= drupal_render($detailed_form);
  $detailed_form_manage = drupal_get_form('islandora_bookmark_detailed_form_manage', $list_id);
  $output .= drupal_render($detailed_form_manage);
  return $output;
}

/**
 * Creates the detailed Bookmark form. Shows bookmarks, remove buttons, export and share functionality.
 *
 * @global type $user
 * @param type $form
 * @param type $form_state
 * @param type $list_id
 * @return int
 */
function islandora_bookmark_detailed_form($form, &$form_state, $list_id) {
  global $user;
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/IslandoraTuque');
  drupal_add_css(drupal_get_path('module', 'islandora_bookmark') . '/css/islandora_bookmark.css');
  $bookmark = islandora_bookmark_get_bookmark_by_number($list_id);

  $form = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="islandora-bookmark-detailed-overview">',
    '#suffix' => '</div>',
  );

  $form['bookmarks'] = array(
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => check_plain($bookmark->bookmark_name),
    ),
  );

  $rows = array();

  // Do pager calcuations to limit the number of objects displayed per page
  $num_eles = variable_get('islandora_bookmark_detailed_page_elements', 10);
  $all_pids = $bookmark->pid_list;
  $num_pids = count($all_pids);

  // Incase we get a page request > than the pages, Drupal will
  // show the last page automatically, need to reflect the pids populated
  // in this fashion
  $calc_pages = ceil($num_pids / $num_eles) - 1;
  if (!empty($_GET['page'])) {
    $page = $_GET['page'];
  }
  if (empty($page)) {
    $page = 0;
    $offset = 0;
  }
  else {
    if ($page > $calc_pages) {
      $page = $calc_pages;
    }
    $offset = $page * $num_eles;
  }

  $pids = array_slice($all_pids, $offset, $num_eles);

  // Loop the pids and determine how to display the markup
  foreach ($pids as $pid) {
    $rows[$pid] = array(
      'markup' => islandora_bookmark_generate_markup($pid),
    );
  }
  pager_default_initialize(count($all_pids), $num_eles);
  $form['bookmarks']['fieldset']['pager'] = array(
    '#markup' => theme('pager'),
    '#weight' => -1,
  );

  $header = array(
    'markup' => array('data' => t('Label'))
  );

  $buttons = array();
  $form_state['islandora_bookmark_current_page'] = $page;
  $form_state['islandora_bookmark_pids_on_page'] = count($pids);
  if ($bookmark->bookmark_owner === $user->uid) {
    $header['remove'] = array('data' => t('Operations'));
    foreach ($pids as $key => $pid) {
      $remove_button = array(
        '#type' => 'submit',
        '#name' => 'remove_pid_' . $pid,
        '#id' => 'remove_pid_' . $pid,
        '#button_type' => 'submit',
        '#pid' => $pid,
        '#value' => t('Remove'),

      );
      $rows[$pid]['remove'] = array(
        'data' => drupal_render($remove_button),
        'class' => 'operations'
      );
    }
    if (count($pids) != 0) {
      $form['bookmarks']['fieldset']['remove_select'] = array(
        '#type' => 'submit',
        '#value' => t('Remove selected'),
        '#name' => 'islandora_bookmark_remove_selected',
      );
      $form['bookmarks']['fieldset']['remove_all'] = array(
        '#type' => 'submit',
        '#value' => t('Remove all'),
        '#name' => 'islandora_bookmark_remove_all',
      );
    }
  }
  if (count($rows)) {
    $form['bookmarks']['fieldset']['table'] = array(
      '#header' => $header,
      '#type' => 'tableselect',
      '#options' => $rows,
      '#empty' => t('Bookmark list is empty.'),
      '#weight' => -2,
    );
  }
  else {
    $form['bookmarks']['fieldset']['table'] = array(
      '#markup' => t('Bookmark list is empty.')
    );
  }

  if (count($pids) != 0) {
    $export = islandora_bookmark_get_export_options();
    $export_options['default'] = t('- Export type -');
    foreach ($export as $key => $value) {
      $export_options[$key] = $key;
      $form_state['islandora_bookmark_export'][$key] = $value;
    }

    $form['bookmarks']['fieldset']['export_title'] = array(
      '#markup' => '<h3>' . t('Export') . '</h3>',
      '#weight' => 3,
    );
    $form['bookmarks']['fieldset']['export_options'] = array(
      '#type' => 'select',
      '#options' => $export_options,
      '#weight' => 4,
    );
    $form['bookmarks']['fieldset']['export_selected_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Export selected bookmarks'),
      '#name' => 'export_selected',
      '#weight' => 5,
    );
    $form['bookmarks']['fieldset']['export_all_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Export all bookmarks'),
      '#name' => 'export_all',
      '#weight' => 6,
    );
  }

  // Share
  if ($bookmark->bookmark_owner === $user->uid) {

    if (user_access('share islandora bookmarks')) {
      // Triggered element (Add item or remove)
      if (isset($form_state['triggering_element'])) {
        // add
        if ($form_state['triggering_element']['#button_id'] == 'islandora-bookmark-add-user') {
          $add_user = $form_state['input']['bookmarks']['users']['listusers'];
          if (drupal_strlen($add_user)) {
            if ($add_user == 0) {
              $output_user = variable_get('anonymous', t('Anonymous'));
            }
            else {
              $output_user = user_load($add_user)->name;
            }
            drupal_set_message(t('The user @adduser has been added to @listname',
              array(
                '@listname' => $bookmark->bookmark_name,
                '@adduser' => $output_user,
              )
            ));
            $bookmark->add_users(array($add_user));
          }
          else {
            drupal_set_message(t("Please select a user to add to @listname.",
              array(
                '@listname' => $bookmark->bookmark_name,
                )
            ), 'error');
          }
        }
        // remove
        if ($form_state['triggering_element']['#button_id'] == 'islandora-bookmark-remove-user') {
          $row = $form_state['triggering_element']['#row'];
          $remove_user = $form_state['values']['bookmarks']['users'][$row]['user'];
          if ($remove_user == 0) {
            $output_user = variable_get('anonymous', t('Anonymous'));
          }
          else {
            $output_user = user_load($remove_user)->name;
          }
          drupal_set_message(t('The user @username has been removed from the list @listname.',
            array(
              '@listname' => $bookmark->bookmark_name,
              '@username' => $output_user,
            )
          ));
          $bookmark->remove_users(array($remove_user));
        }
      }

      $fku = array();
      $rids = array_keys($user->roles);
      // Anonymous users can't share lists with other users.
      if (!in_array('1', $rids)) {
        $form['bookmarks']['users'] = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#title' => t('Share'),
          '#prefix' => '<div id="islandora-bookmark-detailed-overview-users">',
          '#suffix' => '</div>',
        );

        if (count($bookmark->user_list) == 1) {
          $fku['empty'] = array(
            '#type' => 'item',
            '#markup' => t('Bookmark list is not shared with other users.'),
          );
        }
        else {
          $fku['title'] = array(
            '#markup' => '<h3>' . t('Shared with') . ':</h3>',
          );
          // Remove the user from the populated shared users
          $key = array_search($user->uid, $bookmark->user_list);
          $bookmark_users = $bookmark->user_list;
          unset($bookmark_users[$key]);

          foreach ($bookmark_users as $itr => $uid) {
            $tempuser = user_load($uid);
            if ($tempuser->uid == 0) {
              $user_output = variable_get('anonymous', t('Anonymous'));
            }
            else {
              $user_output = $tempuser->name;
            }
            if ($tempuser->uid != $user->uid) {
              $fku[$itr] = array(
                '#prefix' => '<div class="islandora-bookmark-users">',
                '#suffix' => '</div>',
                'label' => array(
                  '#type' => 'item',
                  '#markup' => $user_output,
                ),
                'user' => array(
                  '#type' => 'value',
                  '#value' => $uid,
                ),
                'list-id' => array(
                  '#type' => 'value',
                  '#value' => $bookmark->bookmark_id,
                ),
                'remove' => array(
                  '#type' => 'button',
                  '#value' => t('Remove'),
                  '#name' => 'islandora_bookmark_remove_user_' . $itr,
                  '#row' => $itr,
                  '#button_id' => 'islandora-bookmark-remove-user',
                  '#ajax' => array(
                    'event' => 'click',
                    'callback' => 'islandora_bookmark_remove_user',
                    'wrapper' => 'islandora-bookmark-detailed-overview-users',
                    'method' => 'replace',
                  ),
                ),
              );
            }
          }
        }

        $selectoptions = array("" => t("- Select user -"));

        // Get all users for use in select for forms
        $result = db_query("SELECT uid, name FROM {users} ORDER BY uid");

        foreach ($result as $record) {
          if ($record->uid != $user->uid) {
            $resultname = $record->name;
              if ($record->uid == 0) {
                $resultname = variable_get('anonymous', t('Anonymous'));
              }
            $options[$record->uid] = array(
              'uid' => $record->uid,
              'name' => $resultname
            );
          }
        }
        foreach ($options as $index => $item) {
          if (!in_array($index, $bookmark->user_list)) {
            $selectoptions[$index] = $item['uid'] . ': ' . $item['name'];
          }
        }
        $fku['listusers'] = array(
          '#type' => 'select',
          '#default value' => t("- Select user -"),
          '#options' => $selectoptions,
          '#width' => 20,
          '#prefix' => '<div class="islandora-bookmark-adduser">',
        );
        $fku['listadd'] = array(
          '#type' => 'button',
          '#value' => t('Share'),
          '#button_id' => 'islandora-bookmark-add-user',
          '#suffix' => '</div>',
          '#ajax' => array(
            'event' => 'click',
            'callback' => 'islandora_bookmark_add_user',
            'wrapper' => 'islandora-bookmark-detailed-overview-users',
            'method' => 'replace',
          ),
        );
        $form['bookmarks']['users'] += $fku;
      }
    }
  }
  else {
    if ($user->uid != 0) {
      $form['bookmarks']['remove_self'] = array(
        '#type' => 'submit',
        '#value' => t('Remove yourself from this list'),
        '#submit' => array('islandora_bookmark_remove_self'),
      );
    }
  }
  $form_state['bookmark_object'] = $bookmark;

  return $form;
}

/**
 * Submit handler for the detailed view of a Bookmark. Handles logic for
 * which button is pressed, as well as redirecting to the correct page of
 * the tableselect when an action takes place.
 *
 * @param type $form
 * @param type $form_state
 */
function islandora_bookmark_detailed_form_submit($form, &$form_state) {

  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  module_load_include('inc', 'islandora', 'includes/IslandoraTuque');

  foreach ($_POST as $key => $value) {
    preg_match('/remove_pid_(.*)/', $key, $match);
    if ($match) {
      break;
    }
  }

  if ($match) {
    $bookmark = $form_state['bookmark_object'];
    $bookmark->remove_pids(array($match[1]));
    $removed_object = islandora_object_load($match[1]);

    drupal_set_message(t('The bookmark @objectname has been removed from @listname.',
      array(
        '@listname' => $bookmark->bookmark_name,
        '@objectname' => $removed_object->label,
      )
    ));
    $current_page = $form_state['islandora_bookmark_current_page'];
    $current_pids = $form_state['islandora_bookmark_pids_on_page'];

    if (($current_pids - 1) != 0) {
      $query = array(
        'query' => array(
          'page' => $current_page,
        ),
      );
      $destination = drupal_parse_url('islandora-bookmark/listid/' . $bookmark->bookmark_id, array('query' => $query));
      drupal_goto($destination['path'], $query);
    }
    elseif ($current_page == 0) {
      $destination = drupal_parse_url('islandora-bookmark/listid/' . $bookmark->bookmark_id);
      drupal_goto($destination['path']);
    }
    else {
      $query = array(
        'query' => array(
          'page' => $current_page - 1,
        ),
      );
      $destination = drupal_parse_url('islandora-bookmark/listid/' . $bookmark->bookmark_id);
      drupal_goto($destination['path'], $query);
    }
  }
  // Export selected only
  elseif ($form_state['clicked_button']['#name'] === 'export_selected') {
    $pids = array();
    $broke_pids = '';
    $broke_count = 0;
    foreach ($form_state['values']['bookmarks']['fieldset']['table'] as $checkbox => $value) {
      if ($value !== 0) {
        // Make sure we can actually access the object
        if (islandora_object_load($value)) {
          $pids[] = $value;
        }
        else {
          $broke_pids .= $value . ' ';
          $broke_count++;
        }
      }
    }

    $key = $form_state['values']['bookmarks']['fieldset']['export_options'];
    if (count($pids) > 0 && $key !== 'default') {
      call_user_func($form_state['islandora_bookmark_export'][$key], $pids);
    }
    elseif (count($pids) === 0 && $broke_count === 0) {
      drupal_set_message(t('Please select at least one bookmark.'), 'error');
    }
    elseif ($key === 'default') {
      drupal_set_message(t('Please select an export type.'), 'error');
    }
    else {
      if ($broke_count > 0) {
        $broken_pids = format_plural($broke_count, 'The following object could not to be exported as it does not exist: !broke_pids.',
          'The following objects could not be exported as they do no exist: !broke_pids.',
            array('!broke_pids' => trim($broke_pids)));
        drupal_set_message($broken_pids, 'error');
      }
    }
  }
  elseif ($form_state['clicked_button']['#name'] === 'islandora_bookmark_remove_selected') {
    $pids = array();
    foreach ($form_state['values']['bookmarks']['fieldset']['table'] as $checkbox => $value) {
      if ($value !== 0) {
        $pids[] = $value;
      }
    }
    if (count($pids) > 0) {
      $bookmark = $form_state['bookmark_object'];
      $bookmark->remove_pids($pids);
      drupal_set_message(t('The selected bookmarks have been removed from @listname.',
        array(
          '@listname' => $bookmark->bookmark_name,
        )
      ));
      $current_pids = $form_state['islandora_bookmark_pids_on_page'];
      $current_page = $form_state['islandora_bookmark_current_page'];

      // Still pids left on the page
      if ((count($pids) - $current_pids) != 0) {
        $query = array(
          'query' => array(
            'page' => $current_page,
          ),
        );
        $destination = drupal_parse_url('islandora-bookmark/listid/' . $bookmark->bookmark_id, array('query' => $query));
        drupal_goto($destination['path'], $query);
      }
      elseif ($current_page == 0) {
        $destination = drupal_parse_url('islandora-bookmark/listid/' . $bookmark->bookmark_id);
        drupal_goto($destination['path']);
      }
      else {
        $query = array(
          'query' => array(
            'page' => $current_page - 1,
          ),
        );
        $destination = drupal_parse_url('islandora-bookmark/listid/' . $bookmark->bookmark_id);
        drupal_goto($destination['path'], $query);
      }
    }
    else {
      drupal_set_message(t('Please select at least one bookmark.'), 'error');
    }
  }
  elseif ($form_state['clicked_button']['#name'] === 'islandora_bookmark_remove_all') {
    $bookmark = $form_state['bookmark_object'];
    $remove_count = count($bookmark->pid_list);
    $bookmark->remove_all_pids();

    drupal_set_message(t('All pids have been removed from the @remove_list list.',
        array(
          '@remove_list' => $bookmark->bookmark_name,
        )));
  }
  // Export all pids
  else {
    $bookmark = $form_state['bookmark_object'];
    $pids = $bookmark->pid_list;
    $all_pids = array();
    $broke_pids = '';
    $broke_count = 0;

    foreach ($pids as $pid) {
      if (islandora_object_load($pid)) {
        $all_pids[] = $pid;
      }
      else {
        $broke_pids .= $pid . ' ';
        $broke_count++;
      }
    }
    $key = $form_state['values']['bookmarks']['fieldset']['export_options'];
    if ($key !== 'default' && count($all_pids) > 0) {
      call_user_func($form_state['islandora_bookmark_export'][$key], $all_pids);
    }
    elseif ($key === 'default') {
      drupal_set_message(t('Please select an export type.'), 'error');
    }
    else {
      if ($broke_count > 0) {
        $broken_pids = format_plural($broke_count, 'The following object !broke_pids was unable to be exported as it does not exist.',
          'The following objects !broke_pids were unable to be exported as they do no exist.',
          array('!broke_pids' => trim($broke_pids)));
        drupal_set_message($broken_pids, 'error');
      }
    }
  }
}

/**
 * Manage form for detailed bookmark list.
 *
 * @param array $form
 * @param array $form_state
 * @param string $list_id
 *   Id of the bookmark list manage form to be rendered.
 */
function islandora_bookmark_detailed_form_manage($form, &$form_state, $list_id) {
  global $user;
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/IslandoraTuque');
  drupal_add_css(drupal_get_path('module', 'islandora_bookmark') . '/css/islandora_bookmark.css');
  $bookmark = islandora_bookmark_get_bookmark_by_number($list_id);

  $form = array(
    '#tree' => TRUE
  );
  // Manage
  if ($bookmark->bookmark_owner === $user->uid) {
    // Management
    $form['bookmarks']['management'] = array(
      '#type' => 'fieldset',
      '#title' => t('Manage'),
      '#collapsed' => isset($form_state['islandora_bookmark_collapsed']) ? $form_state['islandora_bookmark_collapsed'] : TRUE,
      '#collapsible' => TRUE,
    );
    $form['bookmarks']['management']['listname'] = array(
      '#type' => 'textfield',
      '#title' => t('List name'),
      '#required' => TRUE,
      '#description' => t('A descriptive label for the bookmark list.'),
      '#size' => 30,
      '#default_value' => $bookmark->bookmark_name,
    );

    $form['bookmarks']['management']['update'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#submit' => array('islandora_bookmark_update_bookmark'),
    );

    $form['bookmarks']['management']['remove'] = array(
      '#type' => 'submit',
      '#value' => t('Delete list'),
      '#submit' => array('islandora_bookmark_delete_bookmark'),
    );

    $form['bookmarks']['management']['list-id'] = array(
      '#type' => 'value',
      '#value' => $bookmark->bookmark_id,
    );
  }
  $form_state['bookmark_object'] = $bookmark;
  return $form;
}

/**
 * Get form to render in the bookmark block.
 *
 * @param string $pid
 *   PID to pass to the form. PID is gathered from url.
 */
function islandora_bookmark_get_object_form($pid = NULL) {
  $object_form = drupal_get_form('islandora_bookmark_fedora_repository_object_form', $pid);
  if (isset($object_form['islandora_bookmark'])) {
    $content = drupal_render($object_form);
  }
  else {
    $content = NULL;
  }
  return $content;
}

/**
 * Creates a form to display which Bookmarks a Fedora object belongs to. Also,
 * gives the ability to add the object to a Bookmark.
 *
 * @global type $user
 * @param type $form
 * @param array $form_state
 * @param type $pid
 *
 * @return array
 */
function islandora_bookmark_fedora_repository_object_form($form, &$form_state, $pid) {
  global $user;
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');

  $containing_lists = islandora_bookmark_get_bookmarks_visible_to_user($pid, $user->uid);

  $form = array(
    '#prefix' => '<div id="islandora-bookmark">',
    '#suffix' => '</div>',
  );

  if (count($containing_lists)) {
    $links = array();
    foreach ($containing_lists as $key => $value) {
      $bookmark_object = islandora_bookmark_get_bookmark_by_number($value);
      $links[] = l($bookmark_object->bookmark_name, 'islandora-bookmark/listid/' . $bookmark_object->bookmark_id);
    }

    $form['islandora_bookmark']['lists'] = array(
      '#type' => 'item',
      '#prefix' => '<h3>' . t('Bookmarked in') . ':</h3>',
      '#markup' => theme('item_list', array('items' => $links)),
    );
  }

  if (!isset($_SESSION['islandora_bookmark'])) {
    $owned_results = db_query('SELECT listname, listid from {islandora_bookmark_list_names} WHERE listowner = :listowner', array(':listowner' => $user->uid));
    $owned_lists = array();
    foreach ($owned_results as $record) {
      $owned_lists[$record->listid] = $record->listname;
    }
  }
  else {
    $owned_lists = array();
    foreach ($_SESSION['islandora_bookmark'] as $value) {
      $temp_list = unserialize($value);
      $owned_lists[$temp_list->bookmark_id] = $temp_list->bookmark_name;
    }
  }

  if (count($owned_lists)) {
    $temp_options = array_diff_key($owned_lists, $containing_lists);
    if (count($temp_options)) {
      $options['default'] = t('- Select bookmark list -');
      foreach ($temp_options as $key => $value) {
        $options[$key] = $value;
      }
      if (user_access('use islandora_bookmark')) {
        if (!count($containing_lists)) {
          $form['islandora_bookmark']['title'] = array(
            '#markup' => '<h3>' . t('Bookmark') . ':</h3>'
          );
        }
        $form['islandora_bookmark']['add_bookmarks'] = array(
          '#type' => 'select',
          '#options' => $options,
        );
        $form['islandora_bookmark']['add_button'] = array(
          '#type' => 'submit',
          '#value' => t('Add bookmark'),
          '#ajax' => array(
            'event' => 'click',
            'callback' => 'islandora_bookmark_add_pid',
            'wrapper' => 'islandora-bookmark',
            'method' => 'replace',
          ),
        );
      }
    }
  }
  $form_state['islandora_bookmark_pid'] = $pid;

  return $form;
}



/**
 * Invokes the islandora_bookmark_export_handler() hook to be used in populating
 * a select.
 *
 * @return array
 */
function islandora_bookmark_get_export_options() {
  $output = module_invoke_all('islandora_bookmark_export_handler');
  return $output;
}

/**
 * Implements hook_islandora_bookmark_export_handler().
 *
 * Defines a default export function for Islandora Bookmark.
 *
 * @return array
 */
function islandora_bookmark_islandora_bookmark_export_handler() {
  return array('CSV' => 'islandora_bookmark_export_pids_as_csv');
}

/**
 * Creates a csv file for download given an input array of pids.
 *
 * @param type $pids
 */
function islandora_bookmark_export_pids_as_csv($pids) {
  module_load_include('inc', 'islandora', 'includes/IslandoraTuque');
  // send response headers to the browser
  $csv_array = array();
  foreach ($pids as $key => $value) {
    $temp_object = islandora_object_load($value);
    $csv_array[$value] = array($temp_object->label, $temp_object->id);
  }
  drupal_add_http_header('Content-Type', 'text/csv');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=islandora_bookmark_export.csv');

  $fp = fopen('php://output', 'w');
  fputcsv($fp, array('Title', 'PID'));
  foreach ($csv_array as $line) {
    fputcsv($fp, $line);
  }
  fclose($fp);
  drupal_exit();
}

/**
 * Form constructor for the Bookmark overview form.
 *
 * @global type $user
 *
 * @param array $form_state
 *   The Drupal form state.
 *
 */
function islandora_bookmark_overview_form($form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'islandora_bookmark') . '/css/islandora_bookmark.css');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');

  $form = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="islandora-bookmark-overview">',
    '#suffix' => '</div>',
  );

  // Do pager calcuations to limit the number of objects displayed per page
  $num_eles = variable_get('islandora_bookmark_overview_page_elements', 10);
  $owned_page = 0;
  $shared_page = 0;
  if (!empty($_GET['page'])) {
    // Explode on the , to track both pagers on the one page
    $pagers = explode(',', $_GET['page']);
    $owned_page = $pagers[0];

    // If the pager for the shared table has been set we grab the values
    // for both the owner and shared pagers
    if (isset($pagers[1])) {
      $shared_page = $pagers[1];
      $owned_page = $pagers[0];
    }
    // Only the first pager has been currently set.
    else {
      $offset_owned = $_GET['page'];
    }
  }

  if (user_access('use islandora_bookmark')) {
    $offset_owned = $owned_page * $num_eles;
    $owned_bookmarks = islandora_bookmark_get_user_owned_bookmarks();
    $paged_owned_bookmarks = array_slice($owned_bookmarks, $offset_owned, $num_eles);

    pager_default_initialize(count($owned_bookmarks), $num_eles, $element = 0);
    $form['owned_bookmarks'] = array(
      'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => t('My bookmarks'),
        'pager' => array(
          '#markup' => theme('pager', array('element' => 0)),
          '#weight' => 5,
        ),
      )
    );

    if (count($owned_bookmarks) > 0) {
      $form['owned_bookmarks']['fieldset']['table'] = islandora_bookmark_form_overview_table($paged_owned_bookmarks);
    }
    else {
      $form['owned_bookmarks']['fieldset']['empty'] = array(
        '#type' => 'item',
        '#markup' => t('You have no bookmarks.'),
      );
    }
  }

  $offset_shared = $shared_page * $num_eles;
  $shared_bookmarks = islandora_bookmark_get_user_shared_bookmarks();
  $paged_shared_bookmarks = array_slice($shared_bookmarks, $offset_shared, $num_eles);

  pager_default_initialize(count($shared_bookmarks), $num_eles, $element = 1);
  $form['shared_bookmarks'] = array(
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t('Bookmarks shared with me'),
      'pager' => array(
        '#markup' => theme('pager', array('element' => 1)),
        '#weight' => 5,
      ),
    )
  );

  if (count($shared_bookmarks) > 0) {
    $form['shared_bookmarks']['fieldset']['table'] =  islandora_bookmark_form_overview_table($paged_shared_bookmarks);
  }
  else {
    $form['shared_bookmarks']['fieldset']['empty'] = array(
      '#type' => 'item',
      '#markup' => t('No bookmarks currently shared with you.'),
    );
  }

  return $form;
}

/**
 * Creates a table for the Bookmark overview page.
 *
 * @param array $bookmark_objs
 * @return type
 */
function islandora_bookmark_form_overview_table(array $bookmark_objs) {

  $bookmark_ids = array();
  foreach ($bookmark_objs as $bookmark) {
    $bookmark_ids[] = $bookmark->bookmark_id;
  }

  $headers = array(
    'bookmark_name' => t('List name'),
    'bookmark_owner' => t('Owner'),
  );
  $rows = array();
  foreach ($bookmark_objs as $bookmark) {
    $owner = user_load($bookmark->bookmark_owner);
    if ($bookmark->bookmark_owner == 0) {
      $owner_output = variable_get('anonymous', t('Anonymous'));
    }
    else {
      $owner_output = $owner->name;
    }

    $rows[$bookmark->bookmark_id] = array(
      'bookmark_name' => l($bookmark->bookmark_name, "islandora-bookmark/listid/$bookmark->bookmark_id"),
      'bookmark_owner' => $owner_output,
    );
  }

  $table = array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  );
  return $table;
}

/**
 * Form constructor for the add Bookmark form.
 *
 * @global type $user
 * @param type $form_state
 * @see islandora_bookmark_add_form_submit()
 */
function islandora_bookmark_add_form($form, $form_state) {
  $form = array(
    '#tree' => TRUE,
  );
  $form['listname'] = array(
    '#title' => t('List name'),
    '#required' => TRUE,
    '#description' => t('A descriptive label for the bookmark list.'),
    '#type' => 'textfield',
    '#size' => 30,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'islandora_bookmark_add_form_submit',
    '#value' => t('Add list'),
  );

  return $form;
}

/**
 * Form submission handler for the islandora_bookmark_add_form().
 *
 * @global type $user
 *
 * @param array $form
 * @param array $form_state
 *
 * @see islandora_bookmark_add_form()
 */
function islandora_bookmark_add_form_submit($form, &$form_state) {
  global $user;
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');

  $bookmark_name = $form_state['values']['listname'];

  // Create a new list.
  $params = array(
    'retrieve' => FALSE,
    'user_id' => $user->uid,
    'bookmark_owner' => $user->uid,
    'bookmark_name' => trim($bookmark_name),
    'bookmark_users' => array($user->uid),
  );

  if ($user->uid == 0) {
    $params['bookmark_session'] = TRUE;
  }

  $temp_list = new Bookmark($params);
  $saved_list = NULL;
  if ($user->uid == 0) {
    $saved_list = 'Note that lists created when not logged will not be saved.';
  }
  drupal_set_message(t('The new list @listname was created. @saved',
    array(
      '@listname' => $bookmark_name,
      '@saved' => $saved_list,
    )
  ));
  drupal_goto('islandora-bookmark');

}

/**
 * Callback for adding a pid to a Bookmark through the Fedora repository
 * object view.
 *
 * @param type $form
 * @param type $form_state
 *
 * @return type
 */

function islandora_bookmark_add_pid($form, &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  $key = $form_state['values']['add_bookmarks'];
  $pid = $form_state['islandora_bookmark_pid'];
  $object = islandora_object_load($pid);
  if ($key !== 'default') {
    $bookmark_object = islandora_bookmark_get_bookmark_by_number($key);

    try {
      $bookmark_object->add_pids(array($pid));
      drupal_set_message(t('The object @label has been bookmarked in @listname.',
        array(
          '@listname' => $bookmark_object->bookmark_name,
          '@label' => $object->label,
        )
      ));
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  else {
    drupal_set_message(t('Please select a list to bookmark @label.', array('@label' => $object->label)), 'error');
  }
  return drupal_rebuild_form('islandora_bookmark_fedora_repository_object_form', $form_state, $form);
}

/**
 * Callback for removing a user from a Bookmark.
 *
 * @param type $form
 * @param array $form_state
 *
 * @return array
 */
function islandora_bookmark_remove_user($form, &$form_state) {
  return $form['bookmarks']['users'];
}

/**
 * Callback for adding a user to a Bookmark.
 *
 * @param type $form
 * @param array $form_state
 *
 * @return array
 */
function islandora_bookmark_add_user($form, &$form_state) {
  return $form['bookmarks']['users'];
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_bookmark_islandora_solr_primary_display() {
  return array(
    'bookmark' => array(
      'name' => t('Bookmark'),
      'module' => 'islandora_bookmark',
      'file' => 'IslandoraSolrResultsBookmark.inc',
      'class' => 'IslandoraSolrResultsBookmark',
      'function' => 'displayResults',
      'description' => t('Search results as Bookmark output'),
    ),
  );
}

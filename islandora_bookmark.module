<?php

/**
 * @file
 * Module used to track and manage user defined lists of pids.
 * 
 */

/*
 * Implementation of hook_permission().
 */
function islandora_bookmark_permission() {
  return array(
    "manage other users' pidlists" => array(
      'title' => t("Manage other users' bookmarks"),
    ),
    'administer islandora_bookmark' => array(
      'title' => t('Administer the islandora_bookmark module'),
    )
  );
  
}

function islandora_bookmark_theme() {
  return array(
    'islandora_bookmark_detailed_object_display' => array(
     'template' => 'theme/islandora_bookmark_default_object_display',
     'variables' => array('fedora_object' => NULL),
    ),
  );
}

function islandora_bookmark_detailed_object_display($fedora_object) {
  $output = theme('islandora_bookmark_detailed_object_display', array('fedora_object' => $fedora_object));
  return array('Default output' => $output);
}
/*
 * Implementation of hook_user_login().
 * 
 * Checks to see if the user was anonymous and created Bookmark objects before
 * they logged in. Iterates through the session and adds these records to the
 * database.
 */
function islandora_bookmark_user_login(&$edit, &$account) {
  global $user;
   
  if (!empty($_SESSION['islandora_bookmark'])) {
     foreach ($_SESSION['islandora_bookmark'] as $key => $value) {
      $bookmark_session = unserialize($value);
      $anon_index = array_search(0, $bookmark_session->user_list, TRUE);
      // Replace the anon who's logged in with their associated user uid
      $bookmark_session->user_id = $user->uid;
      $bookmark_session->user_list[$anon_index] = $user->uid;
      $bookmark_session->bookmark_session = FALSE;
      $bookmark_session->create_list();
      unset($_SESSION['islandora_bookmark'][$key]);
     }
  }
}

/*
 * Implementation of hook_menu().
 */
function islandora_bookmark_menu() {
   module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  $items['islandora_bookmark'] = array(
  'title' => 'My Bookmarks',
  'description' => "Track and manage list of pids",
  'type' => MENU_NORMAL_ITEM,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_overview_form'),
  'access arguments' => array('access content'),   
 );


$items['islandora_bookmark/lists'] = array(
  'title' => 'Overview of Lists',
  'type' => MENU_DEFAULT_LOCAL_TASK,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_overview_form'),
  'access arguments' => array('access content'),
);
$items['islandora_bookmark/listid/%'] = array(
  'title' => 'Detailed List',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_detailed_form', 2),
  'access callback' => 'islandora_bookmark_access',
  'access arguments' => array(2),
  
  
);
$items['islandora_bookmark/add'] = array(
  'title' => 'Add',
  'type' => MENU_LOCAL_TASK,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('islandora_bookmark_add_form'),
  'access arguments' => array('access content'),
);

  $items['admin/config/islandora_bookmark'] = array(
      'title' => 'Islandora Pid List',
      'description' => 'Settings for the Islandora Pid List module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_pid_list_settings'),
      'access arguments' => array(t('Adminisiter islandora_pid_list module')),
  );

  return $items;
}

function islandora_bookmark_detailed_form_submit($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
 
  foreach ($_POST as $key => $value) {
    preg_match('/remove_pid_(.*)/', $key, $match);
    if ($match) {
      break;
    }
  }
  if ($match) {
    $bookmark = $form_state['bookmark_object'];
    $bookmark->remove_pids(array($match[1]));

    drupal_set_message(t('The pid %pidname has been removed from %listname',
        array(
          '%listname' => $bookmark->bookmark_name,
          '%pidname' => $match[1],
        )
      )); 
  } 
}

function islandora_bookmark_detailed_form($form, &$form_state, $list_id) {
  global $user;
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  module_load_include('inc', 'islandora', 'includes/utilities');
  drupal_add_css(drupal_get_path('module', 'islandora_pid_list') . '/css/islandora_pid_list.css');
  
  $bookmark = get_bookmark_by_number($list_id);
  
  $form = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="islandora_bookmark_detailed_overview">',
    '#suffix' => '</div>',
  );

  $form['bookmarks'] = array(
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t($bookmark->bookmark_name),
     ),
  );
  
    // Loop the pids and call the hook view func?
  $rows = array();  
  foreach ($bookmark->pid_list as $pid) {
    $fedora_object = islandora_object_load($pid);
    $rows[$pid] = array(
      'markup' => islandora_bookmark_islandora_bookmark_detailed_view($fedora_object),
    );
  }

  $header = array(
   'markup' => '',
  );

  if ($bookmark->bookmark_owner === $user->uid) {
    $header['remove'] = '';

    foreach ($bookmark->pid_list as $pid) {
      $remove_button = array(
         '#type' => 'submit',
         '#name' => 'remove_pid_' . $pid,
         '#id' => 'remove_pid_' . $pid,
         '#value' => t('Remove'),
      );  
      $rows[$pid]['remove'] = drupal_render($remove_button);
    }
  }
  $form['bookmarks']['fieldset']['table'] = array(
   '#header' => $header,
   '#type' => 'tableselect',
   '#options' => $rows,
   '#empty' => t('No pids currently associated.'),
  );

  if ($bookmark->bookmark_owner === $user->uid) {
    // Load 'management' fieldset
    $form['bookmarks']['management'] = array(
      '#type' => 'fieldset',
      '#title' => t('Management Functions'),
      '#weight' => 20,
    );
    $form['bookmarks']['management']['listname'] = array(
       '#type' => 'textfield',
       '#title' => t('List Name'),
       '#size' => 20,
       '#value' => $bookmark->bookmark_name,
       '#prefix' => '<div class="listdetails">',
       '#ajax' => array(
         'event' => '',
         'keypress' => TRUE,
         'callback' => 'islandora_bookmark_update_name',
         'wrapper' => 'islandora_bookmark_detailed_overview',
         'method' => 'replace',          
       ),
      '#weight' => 20,
     );

     $form['bookmarks']['management']['changename'] = array(
       '#type' => 'image_button',
       '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/add.png', 
       '#suffix' => '</div>',
       '#ajax' => array(
           'event' => 'click',
           'callback' => 'islandora_bookmark_update_name',
           'wrapper' => 'islandora_bookmark_detailed_overview',
           'method' => 'replace',
           ),
       '#weight' => 20,
     );  

     $form['bookmarks']['management']['labelremove'] = array(
       '#type' => 'item',
       '#title' => t('Delete this list'),
       '#weight' => 20000,
       '#prefix' => '<div class="removelist">',
     );

     $form['bookmarks']['management']['remove'] = array(
       '#type' => 'image_button',
       '#weight' => 20001,
       '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/purge.gif', 
       '#suffix' => '</div>',
       '#ajax' => array(
           'event' => 'click',
           'callback' => 'islandora_bookmark_remove_list',
           'wrapper' => 'islandora_bookmark_detailed_overview',
           'method' => 'replace',
       ),
     );


     $form['bookmarks']['management']['list-id'] = array(
         '#type' => 'value',
         '#value' => $bookmark->bookmark_id,
     );  

     $form['bookmarks']['management']['users'] = array( 
       '#type' => 'fieldset',
       '#collapsible' => TRUE,
       '#collapsed' => FALSE,
       '#title' => t('Users shared'),
       '#weight' => 20,
     );

     $fku =& $form['bookmarks']['management']['users'];


     if (count($bookmark->user_list) == 0) {
         $fku['empty'] = array(
           '#type' => 'item',
           '#markup' => t('There are no users associated with this list'),
           '#weight' => 20,
         );
     }
     else {
       foreach ($bookmark->user_list as $itr => $piduser) {
         $tempuser = user_load($piduser);
           if ($tempuser->uid == 0) {
             $user_output = t('Anonymous');
           }
           else {
             $user_output = $tempuser->name;
           }
           if ($tempuser->uid != $user->uid) {
             $fku[$itr] = array(
               '#prefix' => '<div class="users">',
               '#suffix' => '</div>',
               'label' => array(
                 '#type' => 'item',
                 '#markup' => $user_output,
               ),
               'user' => array(
                 '#type' => 'value',
                 '#value' => $piduser,
               ),
               'list-id' => array(
                 '#type' => 'value',
                 '#value' => $bookmark->bookmark_id,
               ),
               'remove' => array(
                 '#type' => 'image_button',
                 '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/minus_small.png',
                 '#ajax' => array(
                   'event' => 'click',
                   'callback' => 'islandora_bookmark_remove_user',
                   'wrapper' => 'islandora_bookmark_detailed_overview',
                   'method' => 'replace',
                 ),
               ),
               '#weight' => 20,
             );
           }
         }
       }

       $selectoptions = array("" => "- Select A User To Add - ");
       // Get all users for use in select for forms

       $result = db_query("SELECT uid, name FROM {users} ORDER BY uid");

       foreach ($result as $record) {
         if ($record->uid != $user->uid) {
           $resultname = $record->name;
             if ($record->uid == 0) {
               $resultname = 'Anonymous';
             }
           $options[$record->uid] = array(
             'uid' => $record->uid,
             'name' => $resultname
           );
         }
       }
       foreach ($options as $index => $item) {
         if (!in_array($index, $bookmark->user_list)) {
           $selectoptions[$index] = $item['uid'] . ': ' . $item['name'];
         }  
       }
       $fku['listusers'] = array(
         '#type' => 'select',
         '#default value' => t('Select a user to add'),
         '#title' => t('Add a user to the list'),
         '#options' => $selectoptions,
         '#width' => 20,
         '#weight' => 10000,
         '#prefix' => '<div class="addusertolist">',
       );
        $fku['listadd'] = array(
         '#type' => 'image_button',
         '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/add.png', 
         '#suffix' => '</div>',
         '#weight' => 10001, 
         '#ajax' => array(
           'event' => 'click',
           'callback' => 'islandora_bookmark_add_user',
           'wrapper' => 'islandora_bookmark_detailed_overview',
           'method' => 'replace',
         ),
       ); 
       $fkp =& $form['bookmarks']['management'];  
       $fkp['pidtext'] = array(
         '#type' => 'textfield',
         '#title' => t('Add a PID'),
         '#size' => 20,
         '#prefix' => '<div class="addpid">',
         '#suffix' => '</div>',
         '#weight' => 10000,
         '#ajax' => array(
           'event' => '',
           'keypress' => TRUE,
           'callback' => 'islandora_bookmark_add_pid',
           'wrapper' => "islandora_bookmark_detailed_overview",
           'method' => 'replace',          
         ),
       );

       $fkp['add_button'] = array(
         '#type' => 'image_button',
         '#src' => drupal_get_path('module', 'islandora_pid_list') . '/images/add.png', 
         '#weight' => 10001,  
         '#ajax' => array(
           'event' => 'click',
           'callback' => 'islandora_bookmark_add_pid',
           'wrapper' => "islandora_bookmark_detailed_overview",
           'method' => 'replace',
         ),
       );
   }
   $form_state['bookmark_object'] = $bookmark;
  return $form;
}
/**
 * Submit handler to remove a user's self from a shared list.
 * 
 * @global type $user
 * 
 * @param array $form
 * 
 * @param array $form_state
 */
function islandora_bookmark_remove_self($form, &$form_state) {
  global $user;
  
  $bookmark_object = get_bookmark_by_number($form_state['bookmark_id']);
  
  if (islandora_bookmark_concurrency_check($bookmark_object, $bookmark_object->bookmark_name)) {
    drupal_set_message(t('You have removed yourself from the list %listname',
      array(
        '%listname' => $bookmark_object->bookmark_name,
      )
    ));
   
    $bookmark_object->remove_users(array($user->uid));  
  }
  drupal_goto('islandora_bookmark');
}

/**
 * Used to determine whether a current user can access the menu path.
 * 
 * @global type $user
 * 
 * @param int $list_id
 * 
 * @return boolean
 */
function islandora_bookmark_access($list_id) {
  global $user;
  
  preg_match('/session_/', $list_id, $match);
  
  if ($match) {
    $bookmark_access = TRUE;
  }
  else {
    $bookmark_access = FALSE;
    $owner_query = db_query('SELECT listowner FROM {islandora_bookmark_list_names} WHERE listid = :listid ORDER BY listid', array(':listid' => $list_id))->fetchObject();

    if ($owner_query && $owner_query->listowner === $user->uid) {
      $bookmark_access = TRUE;
    }
    else {
      $user_query = db_query('SELECT uid FROM {islandora_bookmark_list_users} WHERE listid = :listid', array(':listid' => $list_id));
      foreach ($user_query as $record) {
        if ($record->uid === $user->uid) {
          $bookmark_access = TRUE;
          break;
        }
      }
    }
  }
  
  return $bookmark_access;
  
}
/**
 * Form constructor for the Bookmark overview form.
 * 
 * @global type $user
 * 
 * @param array $form_state
 *   The Drupal form state.
 * 
 */
function islandora_bookmark_overview_form($form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'islandora_pid_list') . '/css/islandora_pid_list.css');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'fedora_repository', 'api/tuque');
    
  $form = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="islandora_bookmark_overview">',
    '#suffix' => '</div>',
  );
  
  $owned_bookmarks = get_user_owned_bookmarks();
  $form['owned_bookmarks'] = array(
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t('My Bookmarks'),
    )
  );
  
  if (count($owned_bookmarks) > 0) {
    $form['owned_bookmarks']['fieldset']['table'] = islandora_bookmark_form_overview_table($owned_bookmarks);
  }
  else {
    $form['owned_bookmarks']['fieldset']['empty'] = array(
      '#type' => 'item',
      '#markup' => t('You do not own any bookmarks.'),
    );
  }
   
  $shared_bookmarks = get_user_shared_bookmarks();
  
  $form['shared_bookmarks'] = array(
    'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => t('Bookmarks Shared With Me'),
     )
  );
  
  if (count($shared_bookmarks) > 0) {
    $form['shared_bookmarks']['fieldset']['table'] =  islandora_bookmark_form_overview_table($shared_bookmarks);
  }
  else {
    $form['shared_bookmarks']['fieldset']['empty'] = array(
      '#type' => 'item',
      '#markup' => t('No bookmarks currently shared with you.'),
    );
  }
  
 return $form;
}

/**
 * Form constructor for the add Bookmark form.
 * 
 * @global type $user
 * @param type $form_state
 * @see islandora_bookmark_add_form_submit
 */
function islandora_bookmark_add_form($form_state) {
  global $user;
      
  $form = array(
    '#title' => t('Add'),
    '#tree' => TRUE,
    'listname' => array(
      '#type' => 'textfield',
      '#title' => t('List Name'),
      '#size' => 20, 
    ),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'islandora_bookmark_add_form_submit',
    '#value' => t('Submit'),
  );
  $form['clear'] = array(
    '#type' => 'submit',
    '#name' => 'islandora_bookmark_add_form_clear_button',
    '#value' => t('Clear'),
  );
  
  return $form; 
}

/**
 * Form submission handler for the islandora_bookmark_add_form().
 * 
 * @global type $user
 * @param array $form
 * @param array $form_state 
 * @see islandora_bookmark_add_form()
 */
function islandora_bookmark_add_form_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
    
  global $user;
  
  $bookmark_name = $form_state['values']['listname'];
 
  // Create a new list
  if (!ctype_space($bookmark_name) && $bookmark_name != '') {
    $paramusers = array();
    $parampids = array();

    $params = array(
      'retrieve' => FALSE,
      'user_id' => $user->uid,
      'bookmark_owner' => $user->uid,
      'bookmark_name' => $bookmark_name,
    );

    if ($user->uid == 0) {
      $params['bookmark_session'] = TRUE;
    }

    $temp_list = new Bookmark($params);
   
    if ($user->uid == 0) {
      $saved_list = 'Note that lists created when not logged will not be saved.';
    }
    drupal_set_message(t('The new list %listname was created. %saved',  
        array(
          '%listname' => $bookmark_name,
          '%saved' => $saved_list,
          )
        ));
    drupal_goto('islandora_bookmark');
  }
  else {
    drupal_set_message(t('A new list must at least have a name!'), 'error');
  }
}

/**
 * Callback for adding a pid to a list.
 * 
 */
function islandora_bookmark_add_pid($form, $form_state) {
  
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  
  $bookmark_object = $form_state['bookmark_object'];
  $list_name = $bookmark_object->bookmark_name;
  $pid_text = $_POST['bookmarks']['management']['pidtext'];
  
  if (strlen($pid_text) != 0) {
    if (!in_array($pid_text, $bookmark_object->pid_list)) {
      try {
        $bookmark_object->add_pids(array($pid_text));
        drupal_set_message(t('The pid %newpid has been added to %listname',
          array(
            '%listname' => $bookmark_object->bookmark_name,
            '%newpid' => $pid_text,
          )
        ));  
      } 
      catch (Exception $e) {
        drupal_set_message($e->getMessage(), 'error');
      }
    }
    else {
    drupal_set_message(t("The pid %pid already exists in %listname",
            array(
              '%pid' => $pid_text,
              '%listname' => $bookmark_object->bookmark_name,
              )
        ), 'error');    
    }
  }
  else {
    drupal_set_message(t("Please enter a pid to add to %listname",
              array(
                '%listname' => $bookmark_object->bookmark_name,
                )
          ), 'error');  
  }
    
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Callback for removing a user from a list.
 * 
 */
function islandora_bookmark_remove_user($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  global $user;
  
  $param = $form_state['clicked_button']['#parents'][0];
  $list_index = $form_state['clicked_button']['#parents'][1];
  $user_offset = $form_state['clicked_button']['#parents'][3];
  $bookmark_object = $form_state['bookmark_object'];
  $list_name = $bookmark_object->bookmark_name;
  
  $remove_user = $form[$param][$list_index]['users'][$user_offset]['user']['#value'];

  if ($remove_user == 0) {
    $output_user = t('Anonymous');
  }
  else {
    $output_user = user_load($remove_user)->name;  
  }

  drupal_set_message(t('The user %username has been removed from the list %listname',
    array(
      '%listname' => $bookmark_object->bookmark_name,
      '%username' => $output_user,
    )
  ));
  
  $bookmark_object->remove_users(array($remove_user));  
  
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Callback for adding a user to a list
 * 
 */
function islandora_bookmark_add_user($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
    
  $bookmark_object = $form_state['bookmark_object'];
  $list_name = $bookmark_object->bookmark_name;
  $add_user = $_POST['bookmarks']['management']['users']['listusers'];
 
  if (strlen($add_user)) {
    if ($add_user == 0) {
      $output_user = t('Anonymous');
    }
    else {
      $output_user = user_load($add_user)->name;  
    } 
    drupal_set_message(t('The user %adduser has been added to %listname',
      array(
        '%listname' => $bookmark_object->bookmark_name,
        '%adduser' => $output_user,
      )
    )); 
    $bookmark_object->add_users(array($add_user));
  }
  else {
    drupal_set_message(t("Please select a user to add to %listname",
      array(
        '%listname' => $bookmark_object->bookmark_name,
        )
    ), 'error');  
  }
    
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

/**
 * Callback for removing a list.
 * 
 */
function islandora_bookmark_remove_list($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  
  $bookmark_object = $form_state['bookmark_object']; 
  $list_name = $bookmark_object->bookmark_name;
  
  drupal_set_message(t('The list %listname has been deleted',
          array(
            '%listname' => $bookmark_object->bookmark_name,
          )
  ));    
  $bookmark_object->remove_list();
  
  // Needed to redirect back to the overview page
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands[] = ctools_ajax_command_redirect('islandora_bookmark');
  print ajax_render($commands);
  exit;
}

/**
 * Callback for updating the name of a list.
 * 
 */
function islandora_bookmark_update_name($form, $form_state) {
  module_load_include('inc', 'islandora_bookmark', 'Bookmark');
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  
  $bookmark_object = $form_state['bookmark_object'];
  $newlist_name = $_POST['bookmarks']['management']['listname'];
    
  if ($bookmark_object->bookmark_name != $newlist_name) {
    if (ctype_space($newlist_name) || $newlist_name == '') {
      drupal_set_message(t('The list %listname must have a name!',
          array(
          '%listname' => $bookmark_object->bookmark_name,  
          )
      ), 'error');
    }
    else {
      drupal_set_message(t('The list %beforelist has had its name changed to %afterlist',
          array(
            '%beforelist' => $bookmark_object->bookmark_name,
            '%afterlist' => $newlist_name,
          )
      ));    
      $bookmark_object->change_list_name($newlist_name);    
    }
  }
  
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

function islandora_bookmark_form_overview_table(array $bookmark_objs) {
 
  $bookmark_ids = array();
  foreach ($bookmark_objs as $bookmark) {
    $bookmark_ids[] = $bookmark->bookmark_id; 
  }
      
  $headers = array(
    'bookmark_name' => t('List Name'),
    'bookmark_owner' => t('Owner'),
  );
  $rows = array();
  foreach ($bookmark_objs as $bookmark) {
    $owner = user_load($bookmark->bookmark_owner);
    if ($bookmark->bookmark_owner == 0) {
      $owner_output = t('Anonymous');
    }
    else {
     $owner_output = $owner->name;
    }
    
    $rows[$bookmark->bookmark_id] = array(
      'bookmark_name' => l(check_plain($bookmark->bookmark_name), "islandora_bookmark/listid/$bookmark->bookmark_id"),
      'bookmark_owner' => $owner_output,
    ); 
  }
  
  $table = array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  );
  return $table;
}

function islandora_bookmark_detailed_remove_pid($form, &$form_state) {
  module_load_include('inc', 'islandora_bookmark', 'islandora_bookmark_api');
  $pid_remove = $form_state['clicked_button']['#pid'];
  
  drupal_set_message(t('The pid %pidname has been removed from %listname',
      array(
        '%listname' => $bookmark_object->bookmark_name,
        '%pidname' => $pid_remove,
      )
    )); 
    $bookmark_object->remove_pids(array($pid_remove));
  
  return drupal_rebuild_form('islandora_bookmark_detailed_form', $form_state, $form);
}

function islandora_bookmark_islandora_bookmark_detailed_view($fedora_object) {
  module_load_include('inc', 'islandora', 'includes/utilities');
 
  // Accumulate the output.
  $output = array();

  // Call cmodel oriented variants first.
  foreach (islandora_build_hook_list('islandora_bookmark_detailed_view', $fedora_object->models) as $hook) {
    dsm($hook, 'hook');
    /*$temp = module_invoke_($hook, $fedora_object);
    
    if (!empty($temp)) {
      $output = array_merge_recursive($output, $temp);
    }*/
  }

  // Add in the default, if we did not get any results.
  if (empty($output)) {
    $output = islandora_bookmark_detailed_object_display($fedora_object);
  
  }
  
  arsort($output);
  
  return implode('', $output);
 
}
